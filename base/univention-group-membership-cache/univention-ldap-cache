#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Copyright 2021 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.
#

from __future__ import print_function

import os
from hashlib import md5
from glob import glob

from univention.ldap_cache.cache import caches

listener_template = '''#!/usr/bin/python2.7
from univention.ldap_cache.listener_module import LdapCacheHandler

name = {}

class QueryHandler(LdapCacheHandler):
    class Configuration(LdapCacheHandler.Configuration):
        name = {}
        def get_description(self):
            return 'Automatically created listener module for the univention-group-membership-member cache ({})'
        def get_ldap_filter(self):
            return {}
        def get_attributes(self):
            return {}
'''

def _md5sum(value):
    m = md5()
    m.update(value)
    return m.hexdigest()


def rebuild(names):
    caches.rebuild(names)


def create_listener_modules():
    listener_dir = '/usr/lib/univention-directory-listener/system/'
    existing_listeners = set(glob(os.path.join(listener_dir, 'ldap-cache-*')))
    for query, (_caches, attrs) in caches.get_queries().items():
        attrs.discard('dn')
        attrs.discard('entryUUID')
        listener_name = 'ldap-cache-%s' % _md5sum(query)
        fname = os.path.join(listener_dir, '%s.py' % listener_name)
        existing_listeners.discard(fname)
        print('Writing', fname, 'for', query)
        with open(fname, 'w') as fd:
            fd.write(listener_template.format(repr(listener_name), repr(listener_name), ', '.join([cache.__class__.__name__ for cache in _caches]), repr(query), repr(sorted(attrs))))
    for fname in existing_listeners:
        print('Removing', fname)
        os.unlink(fname)


def main():
    # rebuild(None)
    create_listener_modules()


if __name__ == '__main__':
    main()
