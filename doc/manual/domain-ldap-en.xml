<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="domaenenkonzept"><title>Domain services / LDAP directory</title>

<section id="domain-ldap:Introduction">
	<title>Introduction</title>
	<para>
		Univention Corporate Server offers a cross platform domain concept with a
		common trust context between Linux and/or Windows systems. Within this domain
		a user is known to all systems via his username and password stored in the
		&ucsUMS; and can use all services which are authorized for him. The management
		system keeps the account synchronized for the windows log-in, Linux/POSIX
		systems and Kerberos. The management of user accounts is described in
		<xref linkend="users:general"/>.
	</para>
	<para>
		All UCS and Windows systems within a UCS domain have a host domain
		account. This allows system-to-system authentication. Domain joining is
		described in <xref linkend="domaenenbeitritt"/>.
	</para>
	<para>
		The certificate authority (CA) of the UCS domain is operated on the
		&ucsPrimaryDN;. A SSL certificate is generated there for every system that has
		joined the domain. Further information can be found in <xref
		linkend="domain:ssl"/>.
	</para>
	<para>
		Every computer system which is a member of a UCS domain has a system role. This
		system role represents different permissions and restrictions, which are
		described in <xref linkend="systemrollen"/>.
	</para>
	<para>
		All domain-wide settings are stored in a directory service on the basis of
		OpenLDAP. <xref linkend="domain:ldap"/> describes how to expand the
		managed attributes with LDAP scheme expansions, how to set up an
		audit-compliant LDAP documentation system and how to define access permissions
		to the LDAP directory.
	</para>
	<para>
		Replication of the directory data within a UCS domain occurs via the
		&ucsUDL;/Notifier mechanism. Further information can be found in
		<xref linkend="domain:listenernotifier"/>.
	</para>
	<para>
		Kerberos is an authentication framework the purpose of which is to permit
		secure identification in the potentially insecure connections of decentralized
		networks. Every UCS domain operates its own Kerberos trust context
		(realm). Further information can be found in <xref
		linkend="domain:kerberos"/>.
	</para>
</section>

<section id="domaenenbeitritt">
	<title>Joining domains</title>
	<para>
		A UCS, Ubuntu or Windows system must join the domain after installation. The
		following describes the different possibilities to do this:
	</para>

	<para>
	  In addition to UCS, Ubuntu and macOS, arbitrary Unix systems can be integrated into the
	  domain. This is documented in <biblioref linkend="ext-doc-domain"/>.
	</para>

	<section id="linux-domaenenbeitritt">
		<title>How UCS systems join domains</title>
		<para>
			There are three possibilities for a UCS system to join an existing domain;
			directly after installation in the Univention Installer (see <xref
			linkend="installation:Domäneneinstellungen:EinerUCSDomäneBeitreten"/>) or subsequently using either
			the command <command>univention-join</command> or the UMC module <guimenu>Domain join</guimenu>.
		</para>
		<para>
			The &ucsPrimaryDN; should always be installed at the most up-to-date release stand
			of the domains, as problems can arise with an outdated &ucsPrimaryDN;
			when a system using the current version joins.
		</para>
		<para>
			When a computer joins, a computer account is created, the SSL certificates are
			synchronized and an LDAP copy is initiated if necessary. The <emphasis>join
			scripts</emphasis> are also run at the end of the join process. These register
			further objects, etc., in the directory service using the software packages
			installed on the system (see <xref linkend="domain-ldap:joinscripts"/>).
		</para>
		<para>
			The joining of the domain is registered on the client side in the
			<filename>/var/log/univention/join.log</filename> log file, which can be used
			for reference in error analysis. Actions run on the &ucsPrimaryDN;
			are stored in the
			<filename>/home/<replaceable>Join-Account</replaceable>/.univention-server-join.log</filename> log
			file.
		</para>
		<para>
			The joining process can be repeated at any time. Systems may even be required
			to rejoin following certain administrative steps (such as changes to important
			system features on the &ucsPrimaryDN;).
		</para>

		<section id="domain-ldap:Subsequent_domain_joins_with_univention-join">
			<title>Subsequent domain joins with <command>univention-join</command></title>
			<para>
				<command>univention-join</command> retrieves a number of essential parameters
				interactively; however, it can also be configured using a number of parameters:
			</para>
			<itemizedlist>
				<listitem>
					<simpara>
					The &ucsPrimaryDN; is usually detected via a DNS request. If that is not
					possible (e.g., a &ucsReplicaDN; server with a different DNS domain is set to join),
					the computer name of the &ucsPrimaryDN; can also be entered directly using the
					<option>-dcname <replaceable>HOSTNAME</replaceable></option> parameter. The computer name must then be
					entered as a fully qualified name, e.g.,
					<systemitem class="fqdomainname">primary.company.com</systemitem>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					A user account which is authorized to add systems to the UCS domains
					is called a join account. By default, this is the
					<systemitem class="username">Administrator</systemitem> user or a member of the two groups <systemitem class="groupname">Domain
					Admins</systemitem> and <systemitem class="groupname">DC Backup Hosts</systemitem>. The join account can be assigned using the
					<option>-dcaccount <replaceable>ACCOUNTNAME</replaceable></option> parameter.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					The password can be set using the <option>-dcpwd <replaceable>FILE</replaceable></option>
					parameter. The password is then read out of the specified file.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
				  The <option>-verbose</option> parameter is used to add additional debug
				  output to the log files, which simplify the analysis in case of errors.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>

		<section id="linux-domaenenbeitritt-umc">
			<title>Joining domains via &ucsUMC; module</title>
			<para>
				A domain join can also be carried out web based via the UMC module <guimenu>Domain join</guimenu>.
				As the Administrator user does not yet exist on a system which has yet to join
				the domain, the login to the module is done as user <systemitem class="username">root</systemitem>.
			</para>
			<para>
				As for the domain joining procedure via the command line, username and password of a
				user account authorized to add computers to a domain must be entered
				in the resulting dialogue.
				Likewise, the &ucsPrimaryDN; will be determined automatically via a DNS request, but
				can also be entered manually.
			</para>
			<para>
			  The <guimenu>Rejoin</guimenu> option can be used to repeat the domain join at any
			  time.
			</para>
		</section>

		<section id="domain-ldap:joinscripts">
		  <title>Join scripts / Unjoin scripts</title>

		  <para>
			<emphasis>Join scripts</emphasis> are run during the domain join. Examples for changes made by join scripts
			are the registration of a print server in the domain or the adaptation of DNS
			entries. Join scripts are components of the individual software packages.
			In the same way, there are also <emphasis>unjoin scripts</emphasis>, which can reset
			these changes following uninstallation of software components.
		  </para>

		  <para>
			Join scripts are stored in the <filename class="directory">/usr/lib/univention-install/</filename>
			directory and unjoin scripts in <filename class="directory">/usr/lib/univention-uninstall/</filename>. Each
			join/unjoin script has a version. An example: A package has already been installed and
			the join script already run. The new version of the package now requires additional
			changes and the version number of the join script is increased.
		  </para>

		  <para>
			The <command>univention-check-join-status</command> command can be used to check whether
			join/unjoin scripts need to be run (either because they have yet to be run or an older version
			was run).
		  </para>

		  <section id="domain-ldap:joinscripts:execlater">
			<title>Subsequent running of join scripts</title>
			<para>
			  If there are join/unjoin scripts on a system which have not yet been run or which can only be
			  run for an older version, a warning message is shown upon opening a UMC module.
			</para>

			<para>
			  Join scripts that have not been run can be executed via the
			  UMC module <guimenu>Domain join</guimenu> by clicking on the menu entry
			  <guimenu>Execute all pending join scripts</guimenu>.
			</para>

			<para>
				The <command>univention-run-join-scripts</command> command is used to run all
				of the join/unjoin scripts installed on a system. The scripts check automatically
				whether they have already been executed.
			</para>
			<para>
				The name of the join/unjoin script and the output of the script are also recorded in
				<filename>/var/log/univention/join.log</filename>.
			</para>
			<para>
				If <command>univention-run-join-scripts</command> is run on another system role
				than the &ucsPrimaryDN;, the user will be asked to input a username and
				password. This can be performed on the &ucsPrimaryDN; via the
				<option>--ask-pass</option> option.
			</para>
		  </section>
		</section>
	</section>

	<section id="windows-domaenenbeitritt">
	  <title>Windows domain joins</title>
	  <para>
		The procedure for joining a Windows system to a UCS domain made available via Samba is now
		described as an example for Windows 10 and Windows 2012 / 2016 / 2019. The process is similar for other
		Windows versions. In addition to the client versions, Windows server systems can also join
		the domain. Windows servers join the domain as member servers; joining a Windows systems as
		a domain controller is not supported.
		Further information can be found in <xref linkend="windows:general"/>
	  </para>

	  <para>
		Only domain-compatible Windows versions can join the UCS domain, i.e., it is not possible for the Home versions of Windows to join a domain.
	  </para>

	  <para>
		A host account is created for the Windows client automatically when it joins the domain (see
		<xref linkend="computers::hostaccounts"/>). Information concerning MAC and IP addresses, the
		network, DHCP or DNS can be configured via UMC modules prior to or after joining the domain.
	  </para>

	  <para>
		Domain joining is usually performed with the local Administrator account on the Windows
		system.
	  </para>

	  <para>
		Joining the domain takes some time and the process must not be canceled prematurely. After
		successful joining a small window appears with the message <guimenu>Welcome to the domain
		<replaceable>domain name</replaceable></guimenu>. This should be confirmed with
		<mousebutton>OK</mousebutton>. The computer must then be restarted for the changes to take
		effect.
	  </para>
	  <para>
		Domain names must be limited to 13 characters as they are otherwise truncated at the Windows
		client and this can lead to log-in errors.
	  </para>

	  <para>
		  For a domain join against a domain controller based on Samba/AD, the DNS configuration of the
		client must be set up in such a way that DNS entries from the DNS zone of the UCS domain can
		also be resolved. In addition, the time on the client system must also be synchronized with
		the time on the domain controller.
	  </para>

		<section id="domain-ldap:Windows_10">
			<title>Windows 10</title>
			<para>
			  The joining of domains is only possible with the Pro and Enterprise editions of
			  Windows 10.
			</para>
			<para>
			  The control panel can be reached via the search field <guimenu>Search the web and Windows</guimenu>,
			  which can be found in the start bar.
			  Under <guimenu>System and Security &ar; System</guimenu> it must be clicked on
			  <guimenu>Change settings &ar; Change</guimenu>.
			</para>
			<para>
			  The <guimenu>Domain</guimenu> option field must be ticked and the name of the
			  domain must be entered in the input field for the domain join. The full domain name should be used,
 			  e.g. <guimenu>mydomain.intranet</guimenu>. After clicking on the <mousebutton>OK</mousebutton>
			  button, the username of a domain administrator must be entered in the input field
			  <guimenu>Username</guimenu>, by default this is <systemitem class="username">Administrator</systemitem>.
			  The password of the domain administrator has to be entered in the input field <guimenu>Password</guimenu>.
			  Finally, the process for joining the domain can then be started by clicking on <mousebutton>OK</mousebutton>.
			</para>
		</section>

		<section id="domain-ldap:win2012">
		  <title>Windows Server 2012 / 2016 / 2019</title>
		  <para>
			The control panel can be reached by moving the cursor to the bottom right-hand corner of
			the screen. The <emphasis>Control Panel</emphasis> can then be searched for under
			<guimenu>Search &ar; Apps</guimenu>. <guimenu>Change settings &ar; Network ID</guimenu>
			must be clicked on under <guimenu>System and Security &ar; System</guimenu>.
		  </para>

		  <para>
			The <guimenu>Domain</guimenu> option field must be ticked and the name of the Samba
			domain entered in the input field for the domain join. After clicking on the
			<mousebutton>OK</mousebutton> button, the <systemitem class="username">Administrator</systemitem> must be
			entered in the input field <guimenu>Name</guimenu> and the password from
			<uri>uid=Administrator,cn=users,<replaceable>base DN</replaceable></uri> transferred to the
			<guimenu>Password</guimenu> input field. The process for joining the domain can then be
			started by clicking on <mousebutton>OK</mousebutton>.
		  </para>
		</section>
	</section>

	<section id="ubuntu-domaenenbeitritt">
		<title>Ubuntu domain joins</title>
		<para>
			Univention provides the <wordasword>Univention Domain Join Assistant</wordasword> to integrate Ubuntu clients into a UCS domain.
			Documentation and installation instructions are available at <ulink url="https://github.com/univention/univention-domain-join">Github</ulink>.
		</para>
	</section>

	<section id="joining-macos">
		<title>macOS domain joins</title>
		<para>
		  UCS supports domain joins of macOS clients into a UCS environment using Samba/AD. This
		  documentation refers to macOS 10.8.2.
		</para>
		<para>
		  The domain join can be performed using the system preferences menu or the
		  <command>dsconfigad</command> command line tool.
		</para>

		<para>
		  After the domain join it is possible to automatically mount CIFS shares to subfolders in
		  <filename>/Volumes</filename> when logging in with a domain user. For that, the following
		  line has to be added to the file <filename>/etc/auto_master</filename>:
		</para>
	  <programlisting>
/Volumes    auto_custom
	  </programlisting>

		<para>
		  In addition, the file <filename>/etc/auto_custom</filename> needs to be created and the
		  shares which should be mounted have to be listed in it in the following way:
		</para>
	  <programlisting>
<replaceable>subfolder name</replaceable>    -fstype=smbfs    ://<replaceable>fqdn</replaceable>/<replaceable>sharename</replaceable>
	  </programlisting>
		<para>
	       Note that the automounted shares are not displayed in the finder's sidebar.
		</para>

		<section id="joining-macos:gui">
		  <title>Domain join using the system preferences GUI</title>
		  <para>
			In the System Preferences via the <guimenu>Users &amp; Groups</guimenu> entry, the
			<guimenu>Login menu</guimenu> can be reached. After authenticating by clicking on the
			lock in the lower left corner and providing credentials of a local Administrator account,
			the <guimenu>Network Account Server: Join</guimenu> button needs to be clicked. From
			that menu it is possible to open the <guimenu>Directory Utility</guimenu>.
		  </para>

		<figure id="domain-ldap:join:osx">
			<title>Domain join of a macOS system</title>
			<graphic scalefit="1" width="60%" align="center" fileref="illustrations50/macosx-bind_en.png"/>
		</figure>

		  <para>
			In the advanced options section, the option <guimenu>Create mobile account at
			login</guimenu> should be activated. A mobile account has the advantage that, when the
			domain is not available, the user can log into the macOS system with the same account
			used for logging into the domain.
		  </para>

		  <para>
			After filling in the domain name in the field <guimenu>Active Directory Domain</guimenu>
			and the hostname of the macOS client in the field <guimenu>Computer ID</guimenu>, the
			join process is initiated after clicking the button <guimenu>Bind...</guimenu>. The
			username and password of an account in the <systemitem class="groupname">Domain Admins</systemitem> group
			needs to be entered, e.g., <systemitem class="username">Administrator</systemitem>.
		  </para>
		</section>

		<section id="joining-macos:cli">
		  <title>Domain join on the command line</title>
		  <para>
			The domain join can also be performed on the command line using <command>dsconfigad</command>:
		  </para>
	    <programlisting language="sh">
dsconfigad -a <replaceable>mac hostname</replaceable> -domain <replaceable>fqdn</replaceable> -ou "CN=Computers,<replaceable>ldap_base</replaceable>" \
  -u <replaceable>Domain Administrator</replaceable> -mobile enable
	    </programlisting>
		  <para>
	    Additional configuration options are available through <command>dsconfigad -help</command>.
		  </para>
		</section>
	</section>
</section>

<section id="systemrollen">
	<title>UCS system roles</title>
	<para>
		In a UCS domain systems can be installed in different <emphasis>system
		roles</emphasis>. The following gives a short characterization of the different
		systems:
	</para>

	<section id="domain-ldap:Primary_Directory_Node">
		<title>&ucsPrimaryDN;</title>
		<para>
			A system with the &ucsPrimaryDN; role is the primary domain
			controller of a UCS domain and is always installed as the first system. The
			domain data (such as users, groups, printers) and the SSL security certificates
			are saved on the &ucsPrimaryDN;.
		</para>
		<para>
			Copies of these data are automatically transferred to all servers with the
			&ucsBackupDN; role.
		</para>
	</section>

	<section id="domain-ldap:Backup_Directory_Node">
		<title>&ucsBackupDN;</title>
		<para>
			All the domain data and SSL security certificates are saved as read-only copies
			on servers with the &ucsBackupDN; role.
		</para>
		<para>
			The &ucsBackupDN; is the fallback system for the &ucsPrimaryDN;. If the latter should
			fail, a &ucsBackupDN; can take over the role of the &ucsPrimaryDN; permanently (see
			<xref linkend="domain:backup2master"/>).
		</para>
	</section>

	<section id="domain-ldap:Replica_Directory_Node">
		<title>&ucsReplicaDN;</title>
		<para>
			All the domain data are saved as read-only copies on servers with the
			&ucsReplicaDN; role. In contrast to the &ucsBackupDN;, however,
			not all security certificates are synchronized.
		</para>
		<para>
			As access to the services running on a &ucsReplicaDN; are performed against the
			local LDAP server, &ucsReplicaDN;s are ideal for site servers and the
			distribution of load-intensive services.
		</para>
		<para>
			A &ucsReplicaDN; cannot be promoted to a &ucsPrimaryDN;
		</para>
	</section>

	<section id="domain-ldap:Managed_Node">
		<title>&ucsManagedNode;</title>
		<para>
			&ucsManagedNode; are server systems without a local LDAP server. Access to domain
			data here is performed via other servers in the domain.
		</para>
	</section>

	<section id="domain-ldap:Ubuntu">
		<title>Ubuntu</title>
		<para>
			Ubuntu clients can be managed with this system role, see <xref
			linkend="computers:ubuntu"/>.
		</para>
	</section>

	<section id="domain-ldap:Linux">
		<title>Linux</title>
		<para>
		  This system role is used for the integration of other Linux systems than UCS and Ubuntu,
		  e.g., for Debian or CentOS systems. The integration is documented in <biblioref
		  linkend="ext-doc-domain"/>.
		</para>
	</section>

	<section id="domain-ldap:macos">
	  <title>macOS</title>
	  <para>
		macOS systems can be joined into a UCS domain using Samba/AD. Additional information can be
		found in <xref linkend="joining-macos"/>.
	  </para>
	</section>


	<section id="domain-ldap:Domain_Trust_Account">
		<title>Domain Trust Account</title>
		<para>
			A domain trust account is set up for trust relationships between Windows and
			UCS domains.
		</para>
	</section>

	<section id="domain-ldap:IP_managed_client">
		<title>IP client</title>
		<para>
			An IP client allows the integration of non-UCS systems into the IP
			management (DNS/DHCP), e.g., for network printers or routers.
		</para>
	</section>

	<section id="domain-ldap:Windows_Domaincontroller">
		<title>Windows Domaincontroller</title>
		<para>
			Windows domain controllers in a Samba/AD environment are operated with this
			system role.
		</para>
	</section>

	<section id="domain-ldap:Windows_Workstation_Server">
		<title>Windows Workstation/Server</title>
		<para>
			Windows clients and Windows &ucsManagedNode;s are managed with this system role.
		</para>
	</section>
</section>

<section id="domain:ldap">
	<title>LDAP directory</title>
	<para>
	  Univention Corporate Server saves domain-wide data in a LDAP directory service
	  based on OpenLDAP. This chapter describes the advanced configuration and
	  coordination of OpenLDAP.
	</para>

	<para>
	  Often several LDAP servers are operated in a UCS domain. The configuration of the server(s)
	  used is described in <xref linkend="computers:configureldapserver"/>.
	</para>

	<section id="domain:ldap:schemata">
		<title>LDAP schemas</title>
		<para>
			Schema definitions specify which object classes exist and which attributes they
			include, i.e., which data can be stored in a directory service. Schema
			definitions are saved as text files and included in the OpenLDAP server's
			configuration file.
		</para>
		<para>
			UCS uses standard schemas where possible in order to allow interoperability
			with other LDAP applications. Schema extensions are supplied for
			Univention-specific attributes - such as for the policy mechanism.
		</para>

		<section id="domain:ldap:extensions">
			<title>LDAP schema extensions</title>
			<para>
				To keep the efforts required for small extensions in LDAP as low as possible,
				&ucsUCS; provides its own LDAP scheme for customer extensions. The LDAP object
				class <classname>univentionFreeAttributes</classname> can be used for extended
				attributes without restrictions. It offers 20 freely usable attributes
				(<property>univentionFreeAttribute1</property> to
				<property>univentionFreeAttribute20</property>) and can be used in connection
				with any LDAP object (e.g., a user object).
			</para>

			<para>
			  If LDAP schema extensions are to be delivered as part of software packages, there is
			  also the possibility of packaging them and distributing them to all the &ucsBackupDN;
			  servers in the domain using a &ucsUDL; module. Further
			  information is available in <xref linkend="packaging-schema-extensions"/>.
			</para>

		</section>

		<section id="domain-ldap:LDAP_schema_replication">
			<title>LDAP schema replication</title>
			<para>
				The replication of the LDAP schemas is also automated via the listener/notifier
				mechanism (see <xref linkend="domain:listenernotifier"/>). This
				relieves the administrator of the need to perform all schema updates manually
				on all the OpenLDAP servers in the domain. Performing the schema replication
				before the replication of LDAP objects guarantees that this doesn't fail as a
				result of missing object classes or attributes.
			</para>
			<para>
				On the &ucsPrimaryDN;, a checksum for all the directories with schema definitions
				is performed when the OpenLDAP server is started. This checksum is compared
				with the last saved checksum in the
				<filename>/var/lib/univention-ldap/schema/md5</filename> file.
			</para>
			<para>
				The actual replication of the schema definitions is initiated by the &ucsUDL;.
				Prior to every request from the &ucsUDN;
				for a new transaction ID, its current schema ID is requested. If this
				is higher than the schema ID on the listener side, the currently used
				sub-schema is procured from the notifier system's LDAP server via an LDAP
				search.
			</para>
			<para>
				The output sub-schema is included on the listener system in LDIF format in the
				<filename>/var/lib/univention-ldap/schema.conf</filename> file and the local
				OpenLDAP server restarted. If the schema replication is completed with this
				step, the replication of the LDAP objects is continued.
			</para>
		</section>
	</section>

	<section id="domain-ldap:directorylogger">
		<title>Audit-proof logging of LDAP changes</title>

		<para>
		  The <package>univention-directory-logger</package> package allows the logging of all
		  changes in the LDAP directory service. As each data record contains the hash value of the
		  previous data record, manipulations of the log file - such as deleted entries - can be
		  uncovered.
		</para>

		<para>
		  Individual areas of the directory service can be excluded from the logging. These branches
		  can be configured using the &ucsUCR; variables <envar>ldap/logging/exclude1</envar>,
		  <envar>ldap/logging/exclude2</envar>, etc.  As standard, the container is excluded in
		  which the temporary objects are stored (<uri>cn=temporary,cn=univention</uri>). The LDAP changes are
		  logged by a &ucsUDL; module. The &ucsUDL;
		  service must be restarted if changes are made to the &ucsUCR; variables.
		</para>

		<para>
		  The logging is made in the <filename>/var/log/univention/directory-logger.log</filename>
		  file in the following format:

		  <screen>
START
Old Hash: Hash sum of the previous data record
DN: DN of the LDAP object
ID: Listener/notifier transaction ID
Modifier: DN of the modifying account
Timestamp: Time stamp in format dd.mm.yyyy hh:mm:ss
Action: add, modify or delete

Old Values:
 List of old attributes, empty when an object is added
New Values:
 List of new attributes, empty when an object is deleted
END
		</screen>

		A hash sum is calculated for each logged data record and also logged in the
		<wordasword>daemon.info</wordasword> section of the Syslog service.
		</para>
		<para>
			As of <u:erratum release="4.4-4">536</u:erratum> the respective transaction ID of the entry is added to the file <filename>/var/log/univention/directory-logger.log</filename> before each line as a prefix:
			<screen>
ID 342: START
ID 342: Old Hash: 70069d51a7e2e168d7c7defd19349985
ID 342: DN: uid=Administrator,cn=users,dc=example,dc=com
ID 342: ID: 342
ID 342: Modifier: cn=admin,dc=example,dc=com
ID 342: Timestamp: 15.04.2020 09:20:40
ID 342: Action: modify
ID 342:
ID 342: Old values:
ID 342: description: Dhis is a description test
ID 342: entryCSN: 20200415091936.317108Z#000000#000#000000
ID 342: modifyTimestamp: 20200415091936Z
ID 342:
ID 342: New values:
ID 342: description: This is a description test
ID 342: entryCSN: 20200415092040.430976Z#000000#000#000000
ID 342: modifyTimestamp: 20200415092040Z
ID 342: END
			</screen>
			If <package>univention-directory-logger</package> was installed before this UCS version, the old behavior (no prefix) is retained by default.
			By setting the &ucsUCRV; <envar>ldap/logging/id-prefix=yes</envar> the new behavior can be activated.
			This prefix simplifies the correlation of related lines when post-processing the log in analysis and monitoring software.
		</para>
	</section>


	<section id="domain-ldap:Timeout_for_inactive_LDAP_connections">
		<title>Timeout for inactive LDAP connections</title>
		<para>
			The &ucsUCRV; <envar>ldap/idletimeout</envar> is used to configure a time
			period in seconds after which the LDAP connection is cut off on the server
			side. When the value is set to 0, no expiry period is in use. The timeout
			period has been set at six minutes as standard.
		</para>
	</section>

	<section id="domain-ldap:LDAP_command_line_tools">
		<title>LDAP command line tools</title>
		<para>
			In addition to the UMC web interface, there are also a range of programs
			with which one can access the LDAP directory from the command line.
		</para>
		<para>
			The <command>univention-ldapsearch</command> tool simplifies the authenticated
			search in the LDAP directory. A search filter needs to be specified as an
			argument; in the following example, the administrator is searched for using the
			user ID:
		</para>
		<programlisting language="sh">
univention-ldapsearch uid=Administrator
		</programlisting>
		<para>
			The <command>slapcat</command> command makes it possible to save the current
			LDAP data in a text file in LDIF format, e.g.:
		</para>
		<programlisting language="sh">
slapcat &gt; ldapdata.txt
		</programlisting>
	</section>

	<section id="domain-ldap:acls">
		<title>Access control for the LDAP directory</title>
		<para>
			Access to the information contained in the LDAP directory is controlled by
			Access Control Lists (ACLs) on the server side. The ACLs are defined in the
			central configuration file <filename>/etc/ldap/slapd.conf</filename> and
			managed using &ucsUCR;. The <filename>slapd.conf</filename> is managed using a
			multifile template; further ACL elements can be added below
			<filename class="directory">/etc/univention/templates/files/etc/ldap/slapd.conf.d/</filename>
			between the <filename>60univention-ldap-server_acl-master</filename> and
			<filename>70univention-ldap-server_acl-master-end</filename> files or the
			existing templates expanded upon.
		</para>

		<para>
		  If LDAP ACL extensions are to be delivered as part of software packages, there is also the
		  possibility of packaging them and distributing them to all the LDAP servers in the domain
		  using a &ucsUDL; module. Further information is available in <xref
		  linkend="packaging-acl-extensions"/>.
		</para>

		<para>
			The default setting of the LDAP server after new installations with UCS does
			not allow anonymous access to the LDAP directory. This behavior is configured
			with the &ucsUCRV; <envar>ldap/acl/read/anonymous</envar>. Individual IP
			addresses can be granted anonymous read permissions via &ucsUCRV;
			<envar>ldap/acl/read/ips</envar>.
		</para>
		<para>
			Following successful authentication on the LDAP server, all attributes of a
			user account can be read out by this user.
		</para>
		<para>
			In addition, an extra, internal account, the root DN, also has full write access.
		</para>
		<para>
			In addition, UCS offers a number of further ACLs installed as standard which
			suppress access to sensitive files (e.g., the user password) and establish
			rules which are necessary for operation (e.g., necessary accesses to computer
			accounts for log-ins). The read and write access to this sensitive information
			if only intended for members of the <systemitem class="groupname">Domain Admins</systemitem>
			group. Nested groups are also supported. The &ucsUCRV;
			<envar>ldap/acl/nestedgroups</envar> can be used to deactivate the nested
			groups function for LDAP ACLs, which will result in a speed increase for
			directory requests.
		</para>

		<section id="domain-ldap:Delegation_of_the_privilege_to_reset_user_passwords">
			<title>Delegation of the privilege to reset user passwords</title>
			<para>
				To facilitate the delegation of the privilege to reset user passwords, the
				<package>univention-admingrp-user-passwordreset</package> package can be
				installed. It uses a join script to create the <systemitem class="groupname">User Password
				Admins</systemitem> user group, in so far as this does not already exist.
			</para>
			<para>
				Members of this group receive the permission via additional LDAP ACLs to reset
				the passwords of other users. These LDAP ACLs are activated automatically
				during the package installation. To use another group, or a group that already
				exists, instead of the <systemitem class="groupname">User Password Admins</systemitem> group, the DN
				of the group to be used can be entered in the &ucsUCRV;
				<envar>ldap/acl/user/passwordreset/accesslist/groups/dn</envar>. The LDAP
				server must be restarted after making changes.
			</para>

			<para>
			  Passwords can be reset via the UMC module <guimenu>Users</guimenu>.
			  By default the module is
			  only accessible to the <systemitem class="username">Administrator</systemitem> user.
			  During the installation a new
			  <uri>default-user-password-admins</uri> policy is created
			  automatically, which is linked to the members of the <systemitem class="groupname">User
			  Password Admins</systemitem> group and can be assigned to a corresponding
			  container in the LDAP directory. Further information on the configuration of UMC
			  policies can be found in Section <xref linkend="delegated-administration"/>.
			</para>

			<para>
				The policy makes it possible to search for users and create an overview of all
				the attributes of a user object. If an attempt is made to modify further
				attributes in addition to the password when the user does not have sufficient
				access rights to the LDAP directory, &ucsUDM; denies him write access with the
				message <emphasis>Permission denied</emphasis>.
			</para>
			<caution>
				<para>
				The package should be installed on the &ucsPrimaryDN;
				and the &ucsBackupDN;s. During the
				installation, the LDAP server is restarted and is thus temporarily
				unavailable.
				</para>
			</caution>
			<para>
			  Password resets via the password group can be prevented for sensitive users or groups
			  (e.g., domain administrators). The &ucsUCR; variables
			  <envar>ldap/acl/user/passwordreset/protected/uid</envar> and
			  <envar>ldap/acl/user/passwordreset/protected/gid</envar> can be used to configure
			  users and groups. Multiple values must be separated by commas.
			  After changes to the variables, it is necessary to restart the LDAP server using the
			  <command>systemctl restart slapd</command> command.
			  By default the
			  members of the <systemitem class="groupname">Domain Admins</systemitem> group are protected against having
			  theirs password changed.
			</para>

			<para>
				If access to additional LDAP attributes should be necessary for changing the
				password, the attribute names can be expanded in &ucsUCRV;
				<envar>ldap/acl/user/passwordreset/attributes</envar>. After the change, the
				LDAP directory service must be restarted for the change to take effect. This
				variable is already set appropriately for a UCS standard installation.
			</para>
		</section>
	</section>

	<section id="domain-ldap:Name_Service_Switch__LDAP_NSS_module">
		<title>Name Service Switch / LDAP NSS module</title>
		<para>
			With the <emphasis>Name Service Switch</emphasis>, the GNU C standard library
			(<systemitem class="library">glibc</systemitem>) used in Univention Corporate Server offers a modular interface for
			resolving the names of users, groups and hosts.
		</para>
		<para>
			The LDAP NSS module is used on UCS systems for access to the domain data (e.g.,
			users) as standard. The module queries the LDAP server specified in the
			&ucsUCRV; <envar>ldap/server/name</envar> (and if necessary the
			<envar>ldap/server/addition</envar>).
		</para>
		<para>
			What measures should be taken if the LDAP server cannot be reached can be
			specified by the &ucsUCRV; <envar>nssldap/bindpolicy</envar>. As standard, if
			the server cannot be reached, a new connection attempt is made. If the variable
			is set to <literal>soft</literal>, then no new attempt is made to
			connect. This can considerably accelerate the boot of a system if the LDAP
			server cannot be reached, e.g., in an isolated test environment.
		</para>
	</section>

	<section id="domain:ldap:syncrepl">
		<title>Syncrepl for synchronization with non-UCS OpenLDAP servers</title>
		<para>
			The syncrepl replication service can also be activated parallel to the notifier
			service for the synchronization of OpenLDAP servers not installed on UCS
			systems. Syncrepl is a component of OpenLDAP, monitors changes in the local
			directory service and transmits them to other OpenLDAP servers.
		</para>

		<!-- Can be re-integrated once the article has been updated to UCS 3.x -->
		<!-- <para> -->
		<!--	The setup is described in the Univention support database at -->
		<!--	<u:sdb>1120</u:sdb> (currently only available in German). -->
		<!-- </para> -->
	</section>

	<section id="domain-ldap:Configuration_of_the_directory_service_when_using_Samba_4">
		<title>Configuration of the directory service when using Samba/AD</title>
		<para>
			As standard, the OpenLDAP server is configured in such a way that
			it also accepts requests from ports 7389 and 7636 in addition to the standard
			ports 389 and 636.
		</para>
		<para>
			If Samba/AD is used, the Samba/AD domain controller service occupies the ports 389
			and 636. In this case, OpenLDAP is automatically reconfigured so that only
			ports 7389 and 7636 are used. This must be taken into account during the
			configuration of syncrepl in particular (see <xref
			linkend="domain:ldap:syncrepl"/>). <command>univention-ldapsearch</command>
			uses the standard port automatically.
		</para>
	</section>

	<section id="domain-ldap:nightlybackup">
	  <title>Daily backup of LDAP data</title>
	  <para>
		The content of the LDAP directory is backed up daily on the &ucsPrimaryDN; and all &ucsBackupDN;
		systems via a Cron job. If Samba 4 is used, its data directory is also backed up.
	  </para>

	  <para>
		The LDAP data are stored in the <filename class="directory">/var/univention-backup/</filename> directory in
		the naming scheme <filename>ldap-backup_DATE.ldif.gz</filename> in LDIF format. They can
		only be read by the <systemitem class="username">root</systemitem> user. The Samba 4 files are stored
		in the directory <filename class="directory">/var/univention-backup/samba/</filename>.
	  </para>

	  <para>
		The &ucsUCRV; <envar>backup/clean/max_age</envar> can be used to define how long old backup files are kept
		(e.g. <envar>backup/clean/max_age=365</envar>, all files older than 365 days are automatically deleted).
		For new installations (from UCS 4.4-7 on) the default for this variable is 365 (days).
		If the variable is not set, no backup files are deleted.
	  </para>

	</section>

</section>

<section id="domain:listenernotifier">
  <title>Listener/notifier domain replication</title>

  <section id="domain:listenernotifier:intro">
	<title>Listener/notifier replication workflow</title>

	<para>
	  Replication of the directory data within a UCS domain occurs via the &ucsUDL;/Notifier mechanism:

	  <itemizedlist>
		<listitem> <simpara>
		  The &ucsUDL; service runs on all UCS systems.
		</simpara></listitem>

		<listitem><simpara>
		  On the &ucsPrimaryDN; (and possibly existing &ucsBackupDN; systems) the <emphasis>&ucsUDN;</emphasis> service monitors
		  changes in the LDAP directory and makes the selected changes available to the &ucsUDL;
		  services on the other UCS systems.
		</simpara></listitem>
	  </itemizedlist>

	</para>

	<figure id="domain-join:listener-notifier">
	  <title>Listener/Notifier mechanism</title>
	  <graphic scalefit="1" width="80%" align="center" fileref="illustrations50/administration-overview_en.png"/>
	</figure>

	<para>
	  The active &ucsUDL; instances in the domain connect to a &ucsUDN;
	  service. If an LDAP change is performed on the &ucsPrimaryDN; (all other LDAP
	  servers in the domain are read-only), this is registered by the &ucsUDN;
	  and notified to the listener instances.
	</para>

	<para>
	  Each &ucsUDL; instance uses a range of &ucsUDL;
	  modules. These modules are shipped by the installed applications; the print server package
	  includes, for example, listener modules which generate the CUPS configuration.
	</para>

	<para>
	  &ucsUDL; modules can be used to communicate domain changes to services which are not
	  LDAP-compatible. The print server CUPS is an example of this: The printer definitions are not
	  read from the LDAP, but instead from the <filename>/etc/cups/printers.conf</filename>
	  file. Now, if a printer is saved in the UMC printer management, it is stored
	  in the LDAP directory. This change is detected by the &ucsUDL; module
	  <emphasis>cups-printers</emphasis> and an entry added to, modified or deleted in
	  <filename>/etc/cups/printers.conf</filename> based on the data in the LDAP.
	</para>

	<para>
	  Additional information on the setup of &ucsUDL; modules and developing your own modules can be
	  found in <xref linkend="developer-reference"/>.
	</para>

	<para>
	  LDAP replication is also performed by a listener module. If the LDAP server to be replicated to
	  is not accessible, the LDAP changes are temporarily stored in the
	  <filename>/var/lib/univention-directory-replication/failed.ldif</filename> file. The contents
	  of the file are automatically transferred to the LDAP when the LDAP server is available again.
	</para>

	<para>
	  The listener/notifier mechanism works based on transactions. A transaction ID is increased for
	  every change in the LDAP directory of the &ucsPrimaryDN;. A &ucsUDL; instance which
	  has missed several transactions - for example, because the computer was switched off -
	  automatically requests all the missing transactions once the connection is available again
	  until its local transaction ID corresponds to that of the &ucsPrimaryDN;.
	</para>

  </section>

  <section id="domain:listenernotifier:erroranalysis">
	<title>Analysis of listener/notifier problems</title>
	  <section id="domain:listenernotifier:erroranalysis:debug">
		<title>Log files/debug level of replication</title>

		<para>
		  All status messages from the &ucsUDL; and the executed listener modules
		  are logged in the <filename>/var/log/univention/listener.log</filename> file. The level of
		  detail of the log messages can be configured using the &ucsUCRV;
		  <envar>listener/debug/level</envar>. The possible values are from 0 (only error messages)
		  to 4 (all status messages). Once the debug level has been changed, the &ucsUDL; must be restarted.
		</para>

		<para>
		  Status messages from the &ucsUDN; service are logged in the
		  <filename>/var/log/univention/notifier.log</filename> file. The debug level can be
		  configured using the <envar>notifier/debug/level</envar> variable (also from 0-4).
		  Once the debug level has been changed, the &ucsUDN; must be restarted.
		</para>

	  </section>

	  <section id="domain:listenernotifier:erroranalysis:replication">
		<title>Identification of replication problems</title>

		<para>
		  When the domain replication is running normally (normal system load, no network problems),
		  the delay between changes being made in UMC modules and these changes being replicated to,
		  for example, a &ucsReplicaDN; is barely noticeable. An incomplete replication can be
		  identified by comparing the transaction IDs of the listener and notifier services.
		</para>

		<para>
		  The transactions registered by the notifier service are written in the
		  <filename>/var/lib/univention-ldap/notify/transaction</filename> file in ascending order
		  on the &ucsPrimaryDN;. An example:


		  <screen>
root@primary:~# tail -1 /var/lib/univention-ldap/notify/transaction
836 cn=replica3,cn=dc,cn=computers,dc=firma,dc=de m
		  </screen>

		  The last transaction received by the listener system is stored in the
		  <filename>/var/lib/univention-directory-listener/notifier_id</filename> file:

		  <screen>
root@replica1:~# cat /var/lib/univention-directory-listener/notifier_id
836
		  </screen>

		  This check can also be performed automatically by the Nagios service
		  <systemitem class="service">UNIVENTION_REPLICATION</systemitem> (see <xref linkend="nagios:preconfiguredchecks"/>).

		</para>
	  </section>


	  <section id="domain:listenernotifier:erroranalysis:reinit">
		<title>Reinitialization of listener modules</title>

		<para>
		  If there are problems in running a listener module, there is the option of reinitializing
		  the module. In this case, all LDAP objects with which the listener module works are passed
		  on again.
		</para>

		<para>
		  The name of the listener module must be supplied to the command for the renewed
		  initialization. The installed listener modules can be found in the
		  <filename class="directory">/var/lib/univention-directory-listener/handlers/</filename> directory.
		</para>

		<para>
		  The following command can be used to reinitialize the printer module, for example:

		  <programlisting language="sh">
univention-directory-listener-ctrl resync cups-printers
		  </programlisting>
		</para>

	  </section>
  </section>
</section>

<section id="domain:ssl">
	<title>SSL certificate management</title>
	<para>
		In UCS, sensitive data are always sent across the network encrypted, e.g., via
		the use of SSH for the login to systems or via the use of protocols based on
		SSL/TLS. (<emphasis>Transport Layer Security (TLS)</emphasis> is the current
		protocol name, the name of the previous protocol <emphasis>Secure Socket Layer
		(SSL)</emphasis>, however, is still more common and is also used in this
		documentation).
	</para>
	<para>
		For example, SSL/TLS is employed in the listener/notifier domain
		replication or for HTTPS access to &ucsWeb;s
	</para>
	<para>
		Both communication partners must be able to verify the authenticity of the
		key used for encrypted communication between two computers. To this end, each
		computer also features a so-called <emphasis>host certificate</emphasis>, which
		is issued and signed by a certification authority (CA).
	</para>
	<para>
		UCS provides its own CA, which is automatically set up during installation of
		the &ucsPrimaryDN; and from which every UCS system automatically procures a
		certificate for itself and the CA's public certificate when joining the
		domain. This CA appears as the root CA, signs its own certificate and can sign
		certificates for other certification authorities.
	</para>

	<para>
	  The properties of the CA are generated automatically during the installation based on system
	  settings such as the locale. These settings can be subsequently adapted on the &ucsPrimaryDN; in
	  the UMC module <guimenu>Certificate settings</guimenu>.
	</para>

	<caution>
		<para>
	  If the UCS domain contains more than one system, all other host certificates need to be
	  reissued after changing the root certificate! The procedure required for this is documented in
	  <u:sdb>1183</u:sdb>.
		</para>
	</caution>

	<!-- How the root CA can be transformed into a subordinate certification -->
	<!-- authority (Sub CA) and positioned below the CA of another or an -->
	<!-- existing organization is documented in WIKIREF-23879. -->

	<para>
		The UCS-CA is always found on the &ucsPrimaryDN;. A copy of the CA is stored on
		every &ucsBackupDN;, which is synchronized with the CA on the &ucsPrimaryDN;
		by a Cron job every 20 minutes.
	</para>
	<caution>
		<para>
		The CA is synchronized from the &ucsPrimaryDN; to the &ucsBackupDN; and not
		vice-versa. For this reason, only the CA on the &ucsPrimaryDN; should be used.
		</para>
	</caution>
	<para>
		If a &ucsBackupDN; is promoted to the &ucsPrimaryDN; (see <xref
		linkend="domain:backup2master"/>), the CA on the new &ucsPrimaryDN; can be used
		directly.
	</para>
	<para>
		The UCS root certificate has a specified validity period - as do the computer
		certificates created with it.
	</para>
	<caution>
		<para>
		Once this period of time elapses, services which encrypt their communication
		with SSL (e.g., LDAP or domain replication) no longer function.
		</para>
	</caution>
	<para>
		It is thus necessary to verify the validity of the certificate regularly and to
		renew the root certificate in time. A Nagios plugin is provided for the
		monitoring of the validity period. In addition, a warning is shown when opening
		a UMC module if the root certificate is going to expire soon (the warning
		period can be specified with the &ucsUCRV; <envar>ssl/validity/warning</envar>;
		the standard value is 30 days).
	</para>

	<para>
	  The renewal of the root certificate and the other host certificates is documented in
	  <u:sdb>1183</u:sdb>.
	</para>

	<para>
		On UCS systems, a Cron job verifies the validity of the local computer
		certificate and the root certificate daily and records the expiry date in the
		&ucsUCR; variables <envar>ssl/validity/host</envar> (host certificate) and
		<envar>ssl/validity/root</envar> (root certificate). The values entered there reflect
		the number of days since the 1/1/1970.
	</para>

	<para>
	  In &ucsUMC;, the effective expiry date of the computer and root certificate can be
	  accessed via the upper right menu and the entry <guimenu>License &ar; License information</guimenu>.
	</para>

</section>

<section id="domain:kerberos">
	<title>Kerberos</title>
	<para>
	  Kerberos is an authentication framework the purpose of which is to permit secure
	  identification in the potentially insecure connections of decentralized networks. In Kerberos,
	  all clients use a foundation of mutual trust, the <emphasis>Key Distribution Center</emphasis>
	  (KDC). A client authenticates at this KDC and receives an authentication token, the so-called
	  ticket which can be used for authentication within the Kerberos environment (the so-called
	  Kerberos realm). The name of the Kerberos realm is configured as part of the installation of
	  the &ucsPrimaryDN; and stored in the &ucsUCRV; <envar>kerberos/realm</envar>. It is not possible
	  to change the name of the Kerberos realm at a later point in time.
	</para>
	<para>
	  Tickets have a standard validity period of 8 hours; this is why it is vital for a Kerberos
	  domain to have the system time synchronized for all the systems belonging to the Kerberos
	  realm.
	</para>

	<para>
	  &ucsUCS; uses the Heimdal Kerberos implementation. An independent Heimdal service is started
	  on UCS Directory Nodes without Samba/AD, while Kerberos is provided by a Heimdal
	  version integrated in Samba on Samba/AD DCs. In a environment composed of UCS Directory Nodes
	  without Samba/AD and Samba/AD domain controllers both Kerberos environments are
	  based on identical data (these are synchronized between Samba/AD and OpenLDAP via the
	  Univention S4 connector (see <xref linkend="windows:s4connector"/>)).
	</para>

	<para>
	  As standard, the KDC is selected via a DNS service record. The KDC used by a system can be
	  reconfigured using the &ucsUCRV; <envar>kerberos/kdc</envar>. If Samba/AD is installed on a
	  system in the domain, the service record is reconfigured so that only the Samba/AD-based KDCs
	  are offered. In a mixed environment it is recommended only to use the Samba/AD KDCs.
	</para>

	<para>
	  The Kerberos admin server, on which the administrative settings of the domain can be made,
	  runs on the &ucsPrimaryDN;. Most of the settings in Univention Corporate Server are taken from
	  the LDAP directory, so that the major remaining function is changing passwords. This can be
	  achieved by means of the Tool <command>kpasswd</command>; the passwords are then changed in
	  the LDAP too. The Kerberos admin server can be configured on a system via the &ucsUCRV;
	  <envar>kerberos/adminserver</envar>.
	</para>
</section>

<section id="domain:password_hashes">
	<title>Password hashes in the directory service</title>
	<para>
		User password hashes are stored in the directory service in the <property>userPassword</property> attribute.
		The <function>crypt</function> library function is used to hash passwords.
		The actual hashing method can be configured via the &ucsUCRV; <envar>password/hashing/method</envar>,
		<function>SHA-512</function> is used by default.
	</para>
	<para>
		As an alternative &ucsUCS; (from version <u:erratum release="4.4-7">887</u:erratum> on) offers the option of using <function>bcrypt</function>
		as hashing method for passwords of user accounts. To activate <function>bcrypt</function> support in OpenLDAP
		the &ucsUCRV; <envar>ldap/pw-bcrypt=true</envar> has to bet set on all LDAP servers. Otherwise it is not possible
		authenticate with a <function>bcrypt</function> hash as password hash. Additionally the &ucsUCRV;
		<envar>password/hashing/bcrypt=true</envar> has to be set, again on all servers, to activate
		<function>bcrypt</function> as the hashing method for setting or changing user password.
	</para>
	<para>
		In addition, the <function>bcrypt</function> cost factor and the <function>bcrypt</function>
		variant can be configured via the &ucsUCRV;s
		<envar>password/hashing/bcrypt/cost_factor</envar> (default <literal>12</literal>) and
		<envar>password/hashing /bcrypt/prefix</envar> (default <literal>2b</literal>).
	</para>
	<caution>
		<para>
			<function>bcrypt</function> is limited to a maximum of 72 characters. So only the first 72
			characters of the password are used to generate the hashes.
		</para>
	</caution>
</section>

<section id="domain:saml">
	<title>SAML identity provider</title>
	<para>
	  SAML (Security Assertion Markup Language) is an XML-based standard for exchanging
	  authentication information in order to allow single sign-on across domain boundaries.
	  UCS provides a fail-safe SAML identity provider on a &ucsPrimaryDN; as well as &ucsBackupDN;.
	  The SAML identity provider is registered at an external service with a cryptographic certificate and establishes a trust relationship.
	  The user then only needs to authenticate himself against UCS and can use the service without renewed authentication.
	</para>

	<figure id="domain:saml:samllogin">
		<title>The <foreignphrase>single sign-on</foreignphrase> login page</title>
		<graphic scalefit="1" width="70%" align="center" fileref="illustrations50/sso_login_en.png"/>
	</figure>

	<para>
		The SAML 2.0 compatible UCS identity provider is provided by the integration of <package>simplesamlphp</package>.
	</para>
	<para>
		The UCS identity provider is tightly integrated into the UCS domain.
		Clients that will be used to access the UCS identity provider have to be able to resolve DNS records in the UCS domain.
		The domain DNS Servers should therefore be configured on all clients in order to be able to resolve the central DNS record, which by default is <uri>ucs-sso.<replaceable>domainname</replaceable></uri>.
	</para>
	<para>
		The UCS identity provider is automatically installed on &ucsPrimaryDN; and &ucsBackupDN;s.
		Further &ucsBackupDN;s can be made available in the domain to increase fail-safe safety.
		The default DNS record <uri>ucs-sso.<replaceable>domainname</replaceable></uri> is registered to increase fail-safe access to the UCS identity provider.
		The SSL certificate for this record is kept on all participating systems in the domain.
		It is advised to install the UCS domain root certificate on all clients that are using <foreignphrase>single sign-on</foreignphrase>.
	</para>
	<para>
		It is possible to associate the SAML authentication with the Kerberos login. This means that users with a valid Kerberos ticket, for example after
		logging on to Windows or Linux, can log on to the identity provider without having to manual re-authenticate.
	</para>
	<para>
		To allow Kerberos authentication at the identity provider, the &ucsUCRV; <envar>saml/idp/authsource</envar> has to be changed from <option>univention-ldap</option>
		to <option>univention-negotiate</option>. The web browsers must be configured to transfer the Kerberos ticket to the SAML Identity Provider. Here are two examples
		for the configuration of Firefox and Internet Explorer / Microsoft Edge:
	</para>
	<variablelist>
		<varlistentry>
			<term>Mozilla Firefox</term>
			<listitem>
				<simpara>
						In the extended Firefox configuration, which can be reached by entering <guimenu>about:config</guimenu> in the Firefox address line, the address
						of the identity provider must be entered in the option <guimenu>network.negotiate-auth.trusted-uris</guimenu>, which is
						<uri>ucs-sso.<replaceable>domainname</replaceable></uri> by default.
				</simpara>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Microsoft Internet Explorer</term>
			<term>Microsoft Edge</term>
			<listitem>
				<simpara>
						In the Control Panel, the <guimenu>Internet Options</guimenu> must be opened, followed by <guimenu>Security</guimenu>, <guimenu>Local Intranet</guimenu>,
						<guimenu>Sites</guimenu>, <guimenu>Advanced</guimenu>. The address of the identity provider has to be added, which is
						<uri>ucs-sso.<replaceable>domainname</replaceable></uri> by default.
				</simpara>
			</listitem>
		</varlistentry>
	</variablelist>
	<para>
		The Kerberos authentication can be restricted to certain IP subnets by setting the &ucsUCRV; <envar>saml/idp/negotiate/filter-subnets</envar> for example to <literal>127.0.0.0/16,192.168.0.0/16</literal>.
		This is especially useful to prevent a pop up login box being shown for clients which are not part of the UCS domain.
	</para>

	<section id="domain:saml:ssologin">
	<title>Login via <foreignphrase>single sign-on</foreignphrase></title>
	<para>
		The <foreignphrase>single sign-on</foreignphrase> is the default login for &ucsWeb;s, as long as <uri>ucs-sso.<replaceable>domainname</replaceable></uri> can be reached.
		To login the domain credentials must be provided.
		For the login directly at the UCS system (i.e., without <foreignphrase>single sign-on</foreignphrase>), follow the link <guimenu>Login without Single Sign On</guimenu>.
	</para>
	<para>
		The design of the login dialog can be changed by editing <filename>/usr/share/univention-management-console-login/css/custom.css</filename>.
		This file will never be altered or deleted during updates.
	</para>
	<para>
		Other web services will redirect to the UCS identity provider login page in a similar fashion in order to carry out a <foreignphrase>single sign-on</foreignphrase>.
		After authenticating, the user will be forwarded back to the web service itself.
		These services need to be registered as described in <xref linkend="domain:saml:additionalserviceprovider"/>.
	</para>
	<para>
		The <foreignphrase>single sign-on</foreignphrase> for a particular service can be initiated from the UCS identity provider, as well.
		This saves an extra visit at the external web service which redirects to the authentication site.
		To do so, a link to the UCS identity provider page needs to be provided in the form of <uri>https://ucs-sso.<replaceable>domainname</replaceable>/simplesamlphp/saml2/idp/SSOService.php?spentityid=<replaceable>[Service provider identifier]</replaceable></uri>.
	</para>
	</section>

	<section id="domain:saml:additionalserviceprovider">
	<title>Adding a new external service provider</title>
	<para>
		The UMC module <guimenu>SAML identity provider</guimenu> allows to manage all service providers that are registered at the UCS identity provider.
		Users have to be activated for a service provider, to be able to authenticate for it at the UCS identity provider.
		The service provider can be activated for groups, to allow authentication with that service provider for all users within that group.
		On the users <guimenu>Account tab</guimenu> or the groups <guimenu>General tab</guimenu>, the service provider can to be added under <guimenu>SAML settings</guimenu>.
	</para>
	<para>
		To register the UCS identity provider at an external service provider, the public part of the SAML certificate is required by the service provider.
		The certificate can be downloaded via a link in the UMC module.
		Some service providers may require the UCS identity provider XML metadata as a file upload.
		By default the XML file can be downloaded from the URL <uri>https://ucs-sso.<replaceable>domainname</replaceable>/simplesamlphp/saml2/idp/metadata.php</uri>.
	</para>
	<para>
		The following attributes can be configured when adding a new service provider.
	</para>
	<table>
		<title>General options when configuring a service provider</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Service provider activation status</entry>
					<entry>
						If activated, the configuration for the service provider is activated and is ready for authentication.
					</entry>

				</row>
				<row>
					<entry>Service provider identifier</entry>
					<entry>
						Defines the internal name of the service provider.
						The name is later selected at user objects, when giving them access to a service provider.
						The identifier cannot be changed later.
					</entry>

				</row>
				<row>
					<entry>Respond to this service provider URL after login</entry>
					<entry>
						After successful authentication, the user's browser is redirected to the service provider.
						The redirection is done to this provided URL.
					</entry>

				</row>
				<row>
					<entry>Single logout URL for service provider</entry>
					<entry>
						Service providers can offer a URL endpoint at which the session at the service provider can be terminated.
						If a user logs out at the UCS identity provider, the browser will get redirected to the provided URL to terminate the session.
					</entry>

				</row>
				<row>
					<entry>Format of <option>NameID</option> attribute</entry>
					<entry>
						The value <option>NameIDFormat</option> that the service provider receives.
						The service provider's documentation should contain information about possible values.
						Example: <option>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</option> or <option>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</option>.
					</entry>

				</row>
				<row>
					<entry>Name of the attribute that is used as <option>NameID</option></entry>
					<entry>
						The LDAP attribute that is used to uniquely identify the user is provided here, e.g., <option>uid</option>.
					</entry>

				</row>
				<row>
					<entry>Name of the organization for service provider</entry>
					<entry>
						The value provided here will be shown on the UCS single sign-on login page.
						It helps the user to identify for which service he enters credentials.
					</entry>

				</row>
				<row>
					<entry>Description of this service provider</entry>
					<entry>
						The value provided here will be shown on the UCS single sign-on login page.
						A longer description about the service provider can be given here.
						The description will be shown on the login page in a separate paragraph.
					</entry>

				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>Advanced settings when configuring a service provider</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>URL to the service provider's privacy policy</entry>
					<entry>
						If a URL is entered here, the UCS identity provider login page will contain a link to this URL.
					</entry>
				</row>
				<row>
					<entry>Allow transmission of LDAP attributes to the service provider</entry>
					<entry>
						By default, the UCS identity provider transmits only the <option>NameID</option> attribute entered on the <guimenu>General</guimenu> page to the service provider.
						If additional LDAP user attributes are required by the service provider, this checkbox can be activated.
						The attributes that should be transmitted have to be entered in the <guimenu>List of LDAP attributes to transmit</guimenu>.
					</entry>
				</row>
				<row>
					<entry>Value for <option>attribute format</option> field</entry>
					<entry>
						In case the transmitted attributes need to be sent in a particular format value, this format can be entered here.
						Example: <option>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</option> or <option>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</option>.
					</entry>
				</row>
				<row>
					<entry>List of LDAP attributes to transmit</entry>
					<entry>
						Every LDAP attribute that should be transmitted to the service provider can be entered here.
						Additionally, one or more service attribute names can be added to each LDAP attribute in the field next to it.
						These service attribute names have the purpose to translate the LDAP Attribute names for the service provider.
						Multiple service attribute names have to be separated by commas.
						In order for the UCS identity provider to process these attributes, they need to be registered additionally via the LDAP object <uri>id=default-saml-idp,cn=univention,<replaceable>base DN</replaceable></uri>.
						LDAP attributes entered at the object can be read and transferred by the Identity Provider.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	</section>
	<section id="domain:saml:extendedconfiguration">
	<title>Extended Configuration</title>
	<para>
		Some environments may require the UCS Identity Provider to provide multiple logical Identity Provider instances.
		Logical separation is achieved by offering different URIs as Identity Provider endpoints.
		The default endpoint is <uri>https://ucs-sso.<replaceable>domainname</replaceable>/simplesamlphp/saml2/idp/metadata.php</uri>.
		Further entries can be created by setting &ucsUCRV;s in the form <envar>saml/idp/entityID/supplement/<replaceable>identifier</replaceable>=true</envar> on all servers which serve the UCS Identity Provider.
		Typically that will be the &ucsPrimaryDN; and all &ucsBackupDN;s.
		The <systemitem class="service">apache2</systemitem> service must then be reloaded.
		For example, to set up another entry under the URI <uri>https://ucs-sso.<replaceable>domainname</replaceable>/simplesamlphp/<replaceable>secondIDP</replaceable>/saml2/idp/metadata.php</uri>, the &ucsUCRV; <envar>saml/idp/entityID/supplement/secondIDP=true</envar> must be set.
	</para>
	</section>
</section>

<section id="domain:oidc">
  <title><application>OpenID Connect Provider</application></title>
  <para>
	UCS offers the possibility to install a <application>OpenID Connect Provider</application>, which allows external web services to delegate the user login via the <application>OpenID Connect</application> (OIDC) protocol to the UCS Identity Management.
	The <application>OpenID Connect Provider</application> App can be installed via the App Center.
	The service is provided by the software <application>Kopano Konnect</application>.
  </para>
  <para>
	The app can be installed on all system roles.
	When installing on a UCS system with the role &ucsPrimaryDN; or &ucsBackupDN; the <application>OpenID Connect Provider</application> is made available under the DNS entry for the <foreignphrase>Single Sign-On</foreignphrase>, normally this is <uri>ucs-sso.<replaceable>domain.name</replaceable></uri>.
	If the app is installed on a different system role, the provider can be reached directly via the hostname instead.
	It should be ensured that the app is installed on all other servers that are reachable at the <uri>ucs-sso</uri> DNS CNAME.
	Session synchronization between multiple installed OIDC Providers in a domain is not preconfigured.
	When experiencing login issues with Apps, we recommend to only install the OIDC Provider on one system, and restrict the <uri>ucs-sso</uri> DNS CNAME to that system, or contact Univention Support.
  </para>
  <para>
	External Web services can be connected to UCS via <application>OpenID Connect</application> by creating a specific object of type <classname>oidc/rpservice</classname> for this service in the UCS directory service.
	These can be created via the UMC module <guimenu>LDAP directory</guimenu> in the container <uri>cn=oidc</uri>, which is located below the container <uri>cn=univention</uri>.
	Here the new service can be registered via the item Add and the selection <guimenu>OpenID Connect Relying Party Service</guimenu>.
  </para>
  <para>
	The same is also possible from the command line:
  </para>
  <programlisting>
udm oidc/rpservice create --set name=&lt;UCS_internal_identifier&gt; \
  --position="cn=oidc,cn=univention,$(ucr get ldap/base)" \
  --set clientid=&lt;ClientID&gt; \
  --set clientsecret=&lt;a_long_password&gt; \
  --set trusted=yes \
  --set applicationtype=web \
  --set redirectURI=&lt;URL_from_service_documentation&gt;
  </programlisting>
  <para>
	The command parameters are:
  </para>
  <variablelist>
	<varlistentry>
	  <term><varname>name</varname></term>
	  <listitem>
		<simpara>
			the service name displayed in the web interface during login.
		</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>clientid</varname></term>
	  <term><varname>secret</varname></term>
	  <listitem>
		<simpara>
			must be identical here and in the connected service (<foreignphrase>shared secret</foreignphrase>).
		</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>trusted</varname></term>
	  <listitem>
		<simpara>
			should be set to <literal>yes</literal> by default.
			Otherwise, the user will be prompted for confirmation to transfer their user attributes to the service.
		</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>applicationtype</varname></term>
	  <listitem>
		<simpara>
			should be set to <literal>web</literal> for Internet services.
		</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>redirectURI</varname></term>
	  <listitem>
		<simpara>
			URL of the login endpoint, which can be found in the documentation of the connected service.
			If a service is accessible via several URLs or should it also be accessible via IP address, all possible addresses must be added to the <varname>redirectURI</varname> attribute.
			The field can therefore be defined multiple times, whereby each individual value must contain a valid URL.
		</simpara>
	  </listitem>
	</varlistentry>
  </variablelist>
  <para>
	The connected web service still needs information about the <application>OpenID Connect</application> endpoints of the provider app for its configuration.
	If the provider app is installed, this information can be found at the URL <uri>https://ucs-sso.<replaceable>domain.name</replaceable>/.well-known/openid-configuration</uri>.
	If the provider app was installed on a system other than &ucsPrimaryDN; or &ucsBackupDN;, use the FQDN of the respective server instead of <uri>ucs-sso.domain.name</uri> as described above.
  </para>
  <para>
	When using <application>OpenID Connect</application>, resolvable DNS names and verifiable certificates are a prerequisite.
	This is especially true for client computers of end users who need to access both the DNS resolvable host names of the Web service and the <application>OpenID Connect Provider</application>.
	In addition, the externally connected Web services must be able to establish a connection to the <application>OpenID Connect Provider</application> in order to be able to retrieve the user attributes.
  </para>
  <para>
	In the special case where the DNS name of the OIDC provider is to be changed, the corresponding value must first be adjusted in the app settings of the <application>OpenID Connect Provider</application> App.
	Since there are diverse scenarios for the availability of the provider after changing the DNS name, the web server configuration cannot be changed automatically.
	For example, depending on the configured DNS name, the UCS Apache configuration has to be adapted.
	The configuration file <filename>/etc/apache2/conf-available/openid-connect-provider.conf</filename> must be made available under the set DNS name in a virtual host.
  </para>
  <para>
	With version 2 of the <application>OIDC-Provider App</application> the authentication to <application>OpenID Connect</application> works via the SAML Identity Provider of the UCS domain.
	If the SAML Identity Provider is not reachable at the default URL <uri>https://ucs-sso.<replaceable>domain.name</replaceable></uri>, the correct URL under which the SAML IdP metadata for the UCS domain can be retrieved must be entered correctly in the app settings.
	If this URL is configured incorrectly, the <application>OpenID Connect Provider</application> will not start.
  </para>
  <para>
	With SAML authentication, the authorization for the use of the <application>OpenID Connect Provider</application> and thus for all apps connected via OIDC can be controlled via SAML authorizations.
	By default, the group <systemitem class="groupname">domain users</systemitem> is enabled for access when the app is installed.
	If this permission should be removed, the corresponding option must also be activated in the app settings so that the permission is not automatically added again.
  </para>
  <para>
	The <application>OpenID Connect Provider</application> logs actions via the Docker Daemon.
	The output can be viewed with the command <command>univention-app logs openid-connect-provider</command>.
  </para>
</section>

<section id="domain:backup2master">
	<title>Converting a &ucsBackupDN; backup to the new &ucsPrimaryDN;</title>
	<para>
		A UCS domain consists of only one &ucsPrimaryDN;, but is not limited in the number
		of &ucsBackupDN;. A &ucsBackupDN; stores all the domain data and all SSL security certificates as
		read-only copies. However, in contrast to the &ucsPrimaryDN;, writing changes are not allowed.
	</para>
	<para>
		Any &ucsBackupDN; can be converted to a &ucsPrimaryDN;. There are two typical
		scenarios for this:
	</para>
	<itemizedlist>
		<listitem>
			<simpara>
			In an emergency if the hardware of the &ucsPrimaryDN; fails
			</simpara>
		</listitem>
		<listitem>
			<simpara>
			To replace a fully functional &ucsPrimaryDN; with new hardware or changing the
			architecture from i386 to amd64.
			</simpara>
		</listitem>
	</itemizedlist>
	<caution>
		<para>
		The conversion of a &ucsBackupDN; to a &ucsPrimaryDN; is a serious configuration change and
		should be prepared carefully. The conversion cannot be reversed.
		</para>
		<para>
		The &ucsPrimaryDN; that is going to be replaced has to be shut down before the conversion. It must not be
		powered on during or after the conversion!
		</para>
		<para>
		Before the conversion, the installed software packages and the current configuration has to be compared between the &ucsPrimaryDN; and &ucsBackupDN;.
		If the &ucsPrimaryDN; is not available anymore, use a file backup.
		After the conversion, all possibly remaining references of the old &ucsPrimaryDN; have to be removed or changed to the new &ucsPrimaryDN;.
		</para>
	</caution>
	<para>
		The conversion primarily involves the changeover of the services relevant for
		authentication such as LDAP, DNS, Kerberos and Samba. The installed software needs to be adjusted
		manually (this can be done using the UMC modules <guimenu>App Center</guimenu>
		or <guimenu>Package Management</guimenu>).
		For example, if the mail component was installed on the previous &ucsPrimaryDN;,
		it will not be automatically installed on the new &ucsPrimaryDN; after the conversion.
		To minimize manual changes after the conversion, please consider <xref
		linkend="domain:fault-tolerant"/>.
	</para>
	<para>
		If additional LDAP schema packages were installed on the &ucsPrimaryDN;, they must
		also be installed on the &ucsBackupDN; prior to the conversion.
		The package list of the old &ucsPrimaryDN; should be saved prior to the promotion in order to
		allow a subsequent comparison of the installed packages. The package list can be created with
		the following command:
	</para>
		<programlisting language="sh">
dpkg --get-selections \* &gt;> dpkg.selection
		</programlisting>
	<para>
		This file should be compared with the same output on the &ucsBackupDN;. Missing packages should
		then be installed on the &ucsBackupDN;. Especially those packages that install a LDAP schema
		are absolutely necessary. The following command executed on the &ucsPrimaryDN; will list all affected packages:
	</para>
		<programlisting language="sh">
dpkg -S /etc/ldap/schema/*.schema \
  /usr/share/univention-ldap/schema/*.schema
		</programlisting>
	<para>
		To simply install all packages of the &ucsPrimaryDN; also on the &ucsBackupDN;, use the previously
		created file <filename>dpkg.selection</filename> of the &ucsPrimaryDN; and run the following command
		on the &ucsBackupDN;:
	</para>
		<programlisting language="sh">
dpkg --set-selections &lt; dpkg.selection
apt-get dselect-upgrade
		</programlisting>
	<para>
		In addition, the &ucsUCR; inventory needs to be saved so that it is possible to compare the
		configuration adjustments on the new &ucsPrimaryDN;. The following files on the &ucsPrimaryDN; need
		to be compared with those on the &ucsBackupDN;:
	</para>
		<programlisting language="sh">
/etc/univention/base.conf
/etc/univention/base-forced.conf
		</programlisting>
	<para>
		UCS saves a copy of those files every night to <filename>/var/univention-backup/ucr-backup_%Y%m%d.tgz</filename>
	</para>
	<para>
		The conversion of a &ucsBackupDN; to the new &ucsPrimaryDN; is performed by running the
		command <command>/usr/lib/univention-ldap/univention-backup2master</command> on the &ucsBackupDN;.
		The system must be rebooted after the conversion. The process is logged to
		<filename>/var/log/univention/backup2master.log</filename>
	</para>
	<para>
		The following steps are performed by <command>univention-backup2master</command>:
	</para>
	<itemizedlist>
		<listitem>
			<simpara>
			Checking the environment: The system must be a &ucsBackupDN; that already joined the domain.
			Additionally, it is checked if the &ucsPrimaryDN; can be resolved via DNS and if the repository server can be reached.
			Also, the &ucsPrimaryDN; must be powered off and not reachable anymore.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				Now, the most important services OpenLDAP, Samba, Kerberos and &ucsUDN; and Listener will be stopped.
				Important &ucsUCRV;, such as <envar>ldap/master</envar> and <envar>server/role</envar> will be changed. The UCS Root CA certificate will be available via the webserver on the &ucsBackupDN;. All mentioned services will be started again.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				The DNS SRV record <literal>kerberos-adm</literal> will be changed from the old to the new &ucsPrimaryDN;.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				If present, the Univention S4 Connector (see <xref linkend="windows:s4connector"/>) will be
				removed from the computer object of the old &ucsPrimaryDN; and will be scheduled for re-configuration on the new &ucsPrimaryDN;.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				The server role of the new &ucsPrimaryDN; will be changed to <classname>domaincontroller_master</classname> in the OpenLDAP directory service.
				The DNS SRV record <literal>_domaincontroller_master._tcp</literal> will also be adjusted.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				If present, all entries of the old &ucsPrimaryDN; will be removed from the local Samba directory service.
				Additionally, the FSMO roles will be transferred to the new &ucsPrimaryDN;.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				The computer object of the old &ucsPrimaryDN; will be deleted from OpenLDAP.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				The OpenLDAP directory service will be searched for any remaining references to the old &ucsPrimaryDN;. All found references (e.g. DNS records) are shown and suggested to be fixed.
				The suggested fixes have to be checked and confirmed one by one.
			</simpara>
		</listitem>
		<listitem>
			<simpara>
				Finally, the package <package>univention-server-backup</package> will be replaced by <package>univention-server-master</package>.
			</simpara>
		</listitem>
	</itemizedlist>
	<para>
		Subsequently, the LDAP directory on the new &ucsPrimaryDN; and the &ucsUCR; values on all UCS systems of the domain should be checked for
		any remaining references to the hostname or the IP address of the old &ucsPrimaryDN;. Those references need to be adjusted to the new &ucsPrimaryDN;, too.
	</para>
</section>

<section id="domain:fault-tolerant">
	<title>Fault-tolerant domain setup</title>
	<para>
		In a domain exist some services that are important for the functionality of all of its members.
		Redundancy can be used to remove those single points of failure.
		An article in the Univention Support database explains how to secure LDAP, Kerberos, DNS, DHCP and Active Directory-compatible Domain Controllers: <u:sdb>1349</u:sdb>.
	</para>
</section>

<section id="domain:admindiary">
	<title>Protocol of activities in the domain</title>
	<para>
		The <foreignphrase>Admin Diary</foreignphrase> app provides the facility to log important events happening in the domain.
		This includes among others:
	</para>
	<itemizedlist>
		<listitem><simpara>
			Creation, move, modification and deletion of users and other objects using &ucsUDM;
		</simpara></listitem>
		<listitem><simpara>
			Installation, update and deinstallation of apps
		</simpara></listitem>
		<listitem><simpara>
			Server password changes
		</simpara></listitem>
		<listitem><simpara>
			Start, end and eventual failures of domain joins
		</simpara></listitem>
		<listitem><simpara>
			Start and end of UCS updates
		</simpara></listitem>
	</itemizedlist>
	<figure id="domain-ldap:adminndiary:list">
		<title>View of events in Admin Diary</title>
		<graphic scalefit="1" width="80%" align="center" fileref="illustrations50/admindiary-list_en.png"/>
	</figure>
	<para>
		<xref linkend="domain-ldap:adminndiary:list"/> shows, how events are shown in the UMC module <guimenu>Admin Diary</guimenu>.
		By default the displayed entries are grouped by week and can additionally be filtered through the search field.
		Selecting an entry from the list opens a dialog showing additional details about the who and when of the event,
		as shown in <xref linkend="domain-ldap:adminndiary:detail"/>.
		Moreover there is the possibility to comment each event.
	</para>
	<figure id="domain-ldap:adminndiary:detail">
		<title>Detail view in <phrase>Admin Diary</phrase></title>
		<graphic scalefit="1" width="80%" align="center" fileref="illustrations50/admindiary-detail_en.png"/>
	</figure>
	<para>
		The app consists of two components:
	</para>
	<variablelist>
		<varlistentry>
			<term><phrase>Admin Diary</phrase> backend</term>
			<listitem><simpara>
				The backend must be installed on one system in the domain before the frontend can be installed.
				It includes a customization for <package>rsyslog</package> and writes into a central database, which defaults to PostgreSQL.
				If MariaDB or MySQL is already installed on the target system, it will be used instead of PostgreSQL.
			</simpara></listitem>
		</varlistentry>
		<varlistentry>
			<term><phrase>Admin Diary</phrase> frontend</term>
			<listitem><simpara>
				Likewise the frontend must be installed at least once, but more installations are also possible.
				The frontend includes the UMC module <guimenu>Admin Diary</guimenu>, which is used to show and comment the entries.
				When installing it on a different host than where the backend is installed, access to the central database needs to be configured manually.
				The required steps for this are described in this <ulink url="https://help.univention.com/t/admin-diary-how-to-seperate-frontend-and-backend/11331">separate document</ulink>.
			</simpara></listitem>
		</varlistentry>
	</variablelist>
</section>

</chapter>
