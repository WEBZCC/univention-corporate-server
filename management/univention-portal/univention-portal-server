#!/usr/bin/python3
#
# Univention Portal
#
# Copyright 2019-2022 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import json

import tornado.ioloop
import tornado.web

import univention.portal.config as config
from univention.portal.factory import make_portal
from univention.portal.log import setup_logger, get_logger

from univention.management.console.ldap import get_machine_connection, get_admin_connection
from univention.admin import modules
from ldap.filter import filter_format

class PortalHandler(tornado.web.RequestHandler):
	def initialize(self, portals):
		self.portals = portals
		self._usersmod = None

	def write_error(self, status_code, **kwargs):
		if "exc_info" in kwargs:
			get_logger("server").exception("Error during service")
		return super(PortalHandler, self).write_error(status_code, **kwargs)

	def find_portal(self):
		best_score = 0
		best_portal = None
		for name, portal in self.portals.items():
			score = portal.score(self.request)
			if score > best_score:
				best_score = score
				best_portal = portal
		return best_portal

	@property
	def usersmod(self):
		if not self._usersmod:
			modules.update()
			self._usersmod = modules.get('users/user')
			if not self._usersmod.initialized:
				lo, po = get_machine_connection()
				modules.init(lo, po, self._usersmod)
		return self._usersmod

	def get_udm_user_by_dn(self, userdn, admin=False):
		if admin:
			lo, po = get_admin_connection()
		else:
			lo, po = get_machine_connection()
		user = self.usersmod.object(None, lo, po, userdn)
		user.open()
		return user

	def get_udm_user_info(self, username, admin=False):
		filter_s = filter_format('(|(uid=%s)(mailPrimaryAddress=%s))', (username, username))
		lo, po = get_machine_connection()
		dn = lo.searchDn(filter=filter_s)[0]
		udm_user = self.get_udm_user_by_dn(dn, admin=admin)
		udm_info = {key: value for key, value in udm_user.items()}
		return udm_info


class LoginHandler(PortalHandler):
	def post(self):
		portal = self.find_portal()
		portal.login_user(self)

	def get(self):
		portal = self.find_portal()
		portal.login_request(self)


class JsonHandler(PortalHandler):
	def get(self):
		portal = self.find_portal()
		if not portal:
			raise tornado.web.HTTPError(404)
		user = portal.get_user(self)

		if user.username:
			udm_user = self.get_udm_user_info(user.username)
		else:
			udm_user = {}

		admin_mode = False
		if self.request.headers.get("X-Univention-Portal-Admin-Mode", "no") == "yes":
			get_logger("admin").info("Admin mode requested")
			admin_mode = user.is_admin()
			if admin_mode:
				get_logger("admin").info("Admin mode granted")
			else:
				get_logger("admin").info("Admin mode rejected")
		answer = {}

		answer["cache_id"] = portal.get_cache_id()
		visible_content = portal.get_visible_content(user, admin_mode)
		answer["user_links"] = portal.get_user_links(visible_content)
		answer["menu_links"] = portal.get_menu_links(visible_content)
		answer["entries"] = portal.get_entries(visible_content)
		answer["folders"] = portal.get_folders(visible_content)
		answer["categories"] = portal.get_categories(visible_content)
		answer["portal"] = portal.get_meta(visible_content, answer["categories"])
		if not user.is_anonymous() and not admin_mode and answer["portal"].get("showUmc"):
			# this is not how the portal-server is supposed to be working
			# but we need it like that...
			umc_portal = portal._get_umc_portal()
			umc_content = umc_portal.get_visible_content(user, admin_mode)
			answer["entries"].extend(umc_portal.get_entries(umc_content))
			answer["folders"].extend(umc_portal.get_folders(umc_content))
			answer["categories"].extend(umc_portal.get_categories(umc_content))
			umc_meta = umc_portal.get_meta(umc_content, answer["categories"])
			answer["portal"]["content"].extend(umc_meta["content"])
		answer["filtered"] = not admin_mode
		answer["username"] = user.username
		answer["mailPrimaryAddress"] = udm_user.get('mailPrimaryAddress')
		answer["title"] = udm_user.get('title')
		answer["firstname"] = udm_user.get('firstname')
		answer["lastname"] = udm_user.get('lastname')
		answer["user_displayname"] = user.display_name
		answer["auth_mode"] = portal.auth_mode(self)
		answer["may_edit_portal"] = portal.may_be_edited(user)
		self.write(answer)


def get_portals():
	ret = {}
	with open("/usr/share/univention-portal/portals.json") as fd:
		portal_definitions = json.load(fd)
	for name, portal_definition in portal_definitions.items():
		get_logger("server").info("Building portal {}".format(name))
		ret[name] = make_portal(portal_definition)
	return ret


def make_app():
	portals = get_portals()
	return tornado.web.Application(
		[
			(r"/.+/login/", LoginHandler, {"portals": portals}),
			(r"/.+/portal.json", JsonHandler, {"portals": portals}),
		]
	)


if __name__ == "__main__":
	setup_logger()
	app = make_app()
	port = config.fetch("port")
	get_logger("server").info("firing up portal server at port %s" % port)
	app.listen(port)
	tornado.ioloop.IOLoop.current().start()
