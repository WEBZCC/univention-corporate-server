@!@
from univention.lib.misc import custom_groupname

ldap_base = configRegistry['ldap/base']
priv = 'write' if configRegistry.get('ldap/server/type') == "master" else 'read'

groups_default_domainadmins = custom_groupname('Domain Admins')
groups_default_windowshosts = custom_groupname('Windows Hosts')

nestedGroups = configRegistry.is_true('ldap/acl/nestedgroups', True)
INDENT = f'  %s'
TO_CLAUSE = f'access to\n%s' % INDENT
BY_CLAUSE = INDENT % f'by %s '

if configRegistry.is_true('ldap/acl/slavepdc', True):
	print(TO_CLAUSE % f'dn.regex="^cn=([^,]+),cn=([^,]+),cn=temporary,cn=univention,{ldap_base}$"')
	print(INDENT % 'filter="objectClass=lock"')
	print(INDENT % 'attrs="entry,@univentionObject,@lock"')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	print(TO_CLAUSE % f'dn.regex="^cn=([^,]+),cn=temporary,cn=univention,{ldap_base}$"')
	print(INDENT % 'attrs=children,entry')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	print(TO_CLAUSE % f'dn.regex="^cn=([^,]+),cn=temporary,cn=univention,{ldap_base}$"')
	print(INDENT % 'attrs=univentionLastUsedValue')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	print(TO_CLAUSE % f'dn.subtree="cn=computers,{ldap_base}"')
	print(INDENT % 'attrs=children,entry')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	# FIXME: the following rule is incomplete as it allows creating and modifying of any object type
	print(TO_CLAUSE % f'dn.children="{ldap_base}"')
	print(INDENT % 'filter="(objectClass=univentionWindows)"')
	print(INDENT % 'attrs="!univentionShare"')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	# FIXME: the following rule is incomplete as it allows creating and modifying of any object type
	print(TO_CLAUSE % f'dn.children="{ldap_base}"')
	print(INDENT % f'filter="(&(objectClass=univentionGroup)(cn={groups_default_windowshosts}))"')
	print(INDENT % 'attrs="!posixAccount,!univentionShare"')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	print(TO_CLAUSE % f'dn.base="cn=samba,{ldap_base}"')
	print(INDENT % 'attrs=children')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

	print(TO_CLAUSE % f'dn.children="{ldap_base}"')
	print(INDENT % 'filter="(objectClass=sambaDomain)"')
	print(INDENT % 'attrs=@sambaDomain')
	if configRegistry['ldap/server/type'] == "slave":
		print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

print(TO_CLAUSE % f'dn.regex="^cn=.*,cn=dc,cn=computers,{ldap_base}$"')
print(INDENT % 'attrs=userPassword,krb5Key,krb5KDCFlags,sambaNTPassword,sambaLMPassword,sambaPwdLastSet,pwhistory,krb5KeyVersionNumber,univentionWindowsReinstall,sambaPwdCanChange,sambaPwdMustChange')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'self {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" read')
print(BY_CLAUSE % '* none')

print(TO_CLAUSE % f'dn.regex="^cn=.*,cn=memberserver,cn=computers,{ldap_base}$"')
print(INDENT % 'attrs=userPassword,krb5Key,krb5KDCFlags,sambaNTPassword,sambaLMPassword,sambaPwdLastSet,pwhistory,krb5KeyVersionNumber,univentionWindowsReinstall,sambaPwdCanChange,sambaPwdMustChange')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
print(BY_CLAUSE % f'self {priv}')
print(BY_CLAUSE % '* none')

print(TO_CLAUSE % f'dn.regex="^cn=.*,cn=memberserver,cn=computers,{ldap_base}$"')
print(INDENT % 'attrs=objectClass,sambaSID,sambaPrimaryGroupSID,displayName,sambaAcctFlags')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
print(BY_CLAUSE % '* +0 break')

print(TO_CLAUSE % 'attrs=userPassword,krb5Key,krb5KDCFlags,sambaNTPassword,sambaLMPassword,sambaPwdLastSet,pwhistory,krb5KeyVersionNumber,univentionWindowsReinstall,sambaPwdCanChange,sambaPwdMustChange,sambaPasswordHistory,sambaClearTextPassword,sambaPreviousClearTextPassword')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=memberserver,cn=computers,{ldap_base}" read')
print(BY_CLAUSE % '* none')

if configRegistry['ldap/server/type'] == "master":
	print(TO_CLAUSE % 'attrs=sambaAcctFlags')
	if nestedGroups:
		print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
	else:
		print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
	print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
	print(BY_CLAUSE % '* +0 break')

print(TO_CLAUSE % 'attrs=shadowMax,krb5PasswordEnd,shadowLastChange')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=memberserver,cn=computers,{ldap_base}" read')
print(BY_CLAUSE % '* +0 break')

print(TO_CLAUSE % f'dn.base="cn=idmap,cn=univention,{ldap_base}"')
print(INDENT % 'attrs=children,@organizationalRole,@sambaIdmapEntry,@sambaSidEntry')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=memberserver,cn=computers,{ldap_base}" write')
print(BY_CLAUSE % '* none')

print(TO_CLAUSE % f'dn.children="cn=idmap,cn=univention,{ldap_base}"')
print(INDENT % 'attrs=entry,@univentionObject,@sambaUnixIdPool,@sambaIdmapEntry,@sambaSidEntry,@organizationalRole')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=dc,cn=computers,{ldap_base}" {priv}')
print(BY_CLAUSE % f'dn.children="cn=memberserver,cn=computers,{ldap_base}" write')
print(BY_CLAUSE % '* none')

if configRegistry.is_false('ldap/acl/read/anonymous'):
	print(TO_CLAUSE % f'dn.subtree="{ldap_base}"')
	print(INDENT % 'attrs=entry,uid')
	ldap_acl_read_anonymous_ips = configRegistry.get('ldap/acl/read/ips')
	if ldap_acl_read_anonymous_ips:
		for ip in ldap_acl_read_anonymous_ips.split(','):
			print(BY_CLAUSE % f'peername.ip={ip} read')
	print(BY_CLAUSE % 'anonymous auth')
	print(BY_CLAUSE % '* +0 break')

print(TO_CLAUSE % '*')
if configRegistry['ldap/server/type'] == "slave":
	print(BY_CLAUSE % f'dn.base="cn=admin,{ldap_base}" {priv}')
if nestedGroups:
	print(BY_CLAUSE % f'set="user & [cn={groups_default_domainadmins},cn=groups,{ldap_base}]/uniqueMember*" {priv}')
else:
	print(BY_CLAUSE % f'group/univentionGroup/uniqueMember="cn={groups_default_domainadmins},cn=groups,{ldap_base}" {priv}')
if configRegistry.is_false('ldap/acl/read/anonymous'):
	print(BY_CLAUSE % 'users read')
	ldap_acl_read_anonymous_ips = configRegistry.get('ldap/acl/read/ips')
	if ldap_acl_read_anonymous_ips:
		for ip in ldap_acl_read_anonymous_ips.split(','):
			print(BY_CLAUSE % f'peername.ip={ip} read')
else:
	print(BY_CLAUSE % '* read')
@!@
